{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn import tree\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>name</th>\n",
       "      <th>category</th>\n",
       "      <th>main_category</th>\n",
       "      <th>currency</th>\n",
       "      <th>deadline</th>\n",
       "      <th>goal</th>\n",
       "      <th>launched</th>\n",
       "      <th>pledged</th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>country</th>\n",
       "      <th>usd pledged</th>\n",
       "      <th>usd_pledged_real</th>\n",
       "      <th>usd_goal_real</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000002330</td>\n",
       "      <td>The Songs of Adelaide &amp; Abullah</td>\n",
       "      <td>Poetry</td>\n",
       "      <td>Publishing</td>\n",
       "      <td>GBP</td>\n",
       "      <td>2015-10-09</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>2015-08-11 12:12:28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>failed</td>\n",
       "      <td>0</td>\n",
       "      <td>GB</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1533.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000003930</td>\n",
       "      <td>Greeting From Earth: ZGAC Arts Capsule For ET</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2017-11-01</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>2017-09-02 04:43:57</td>\n",
       "      <td>2421.0</td>\n",
       "      <td>failed</td>\n",
       "      <td>15</td>\n",
       "      <td>US</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2421.0</td>\n",
       "      <td>30000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000004038</td>\n",
       "      <td>Where is Hank?</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2013-02-26</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>2013-01-12 00:20:50</td>\n",
       "      <td>220.0</td>\n",
       "      <td>failed</td>\n",
       "      <td>3</td>\n",
       "      <td>US</td>\n",
       "      <td>220.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>45000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000007540</td>\n",
       "      <td>ToshiCapital Rekordz Needs Help to Complete Album</td>\n",
       "      <td>Music</td>\n",
       "      <td>Music</td>\n",
       "      <td>USD</td>\n",
       "      <td>2012-04-16</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>2012-03-17 03:24:11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>failed</td>\n",
       "      <td>1</td>\n",
       "      <td>US</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000011046</td>\n",
       "      <td>Community Film Project: The Art of Neighborhoo...</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2015-08-29</td>\n",
       "      <td>19500.0</td>\n",
       "      <td>2015-07-04 08:35:03</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>canceled</td>\n",
       "      <td>14</td>\n",
       "      <td>US</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>19500.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ID                                               name  \\\n",
       "0  1000002330                    The Songs of Adelaide & Abullah   \n",
       "1  1000003930      Greeting From Earth: ZGAC Arts Capsule For ET   \n",
       "2  1000004038                                     Where is Hank?   \n",
       "3  1000007540  ToshiCapital Rekordz Needs Help to Complete Album   \n",
       "4  1000011046  Community Film Project: The Art of Neighborhoo...   \n",
       "\n",
       "         category main_category currency    deadline     goal  \\\n",
       "0          Poetry    Publishing      GBP  2015-10-09   1000.0   \n",
       "1  Narrative Film  Film & Video      USD  2017-11-01  30000.0   \n",
       "2  Narrative Film  Film & Video      USD  2013-02-26  45000.0   \n",
       "3           Music         Music      USD  2012-04-16   5000.0   \n",
       "4    Film & Video  Film & Video      USD  2015-08-29  19500.0   \n",
       "\n",
       "              launched  pledged     state  backers country  usd pledged  \\\n",
       "0  2015-08-11 12:12:28      0.0    failed        0      GB          0.0   \n",
       "1  2017-09-02 04:43:57   2421.0    failed       15      US        100.0   \n",
       "2  2013-01-12 00:20:50    220.0    failed        3      US        220.0   \n",
       "3  2012-03-17 03:24:11      1.0    failed        1      US          1.0   \n",
       "4  2015-07-04 08:35:03   1283.0  canceled       14      US       1283.0   \n",
       "\n",
       "   usd_pledged_real  usd_goal_real  \n",
       "0               0.0        1533.95  \n",
       "1            2421.0       30000.00  \n",
       "2             220.0       45000.00  \n",
       "3               1.0        5000.00  \n",
       "4            1283.0       19500.00  "
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "location = 'datasets/ks-projects-201801.csv'\n",
    "df = pd.read_csv(location)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(334474, 15)"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[(df['state'] == 'successful') | (df['state'] == 'failed') | (df['state'] == 'live')]\n",
    "df.head()\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['launched'] = pd.to_datetime(df['launched'])\n",
    "df['deadline'] = pd.to_datetime(df['deadline'])\n",
    "df['time'] = (df['deadline'] - df['launched']).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "def divide(num, den):\n",
    "    if den > 0.0:\n",
    "        return num / den\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['gap'] = df['usd_pledged_real'] - df['usd_goal_real']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = divide (2,2)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['pledge_per_backer'] = df['usd_pledged_real'] /  df['backers']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['failed', 'successful', 'live'], dtype=object)"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>name</th>\n",
       "      <th>category</th>\n",
       "      <th>main_category</th>\n",
       "      <th>currency</th>\n",
       "      <th>deadline</th>\n",
       "      <th>goal</th>\n",
       "      <th>launched</th>\n",
       "      <th>pledged</th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>country</th>\n",
       "      <th>usd pledged</th>\n",
       "      <th>usd_pledged_real</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>gap</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000002330</td>\n",
       "      <td>The Songs of Adelaide &amp; Abullah</td>\n",
       "      <td>Poetry</td>\n",
       "      <td>Publishing</td>\n",
       "      <td>GBP</td>\n",
       "      <td>2015-10-09</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>2015-08-11 12:12:28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>GB</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1533.95</td>\n",
       "      <td>58</td>\n",
       "      <td>-1533.95</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000003930</td>\n",
       "      <td>Greeting From Earth: ZGAC Arts Capsule For ET</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2017-11-01</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>2017-09-02 04:43:57</td>\n",
       "      <td>2421.0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>US</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2421.0</td>\n",
       "      <td>30000.00</td>\n",
       "      <td>59</td>\n",
       "      <td>-27579.00</td>\n",
       "      <td>161.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000004038</td>\n",
       "      <td>Where is Hank?</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2013-02-26</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>2013-01-12 00:20:50</td>\n",
       "      <td>220.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>US</td>\n",
       "      <td>220.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>45000.00</td>\n",
       "      <td>44</td>\n",
       "      <td>-44780.00</td>\n",
       "      <td>73.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000007540</td>\n",
       "      <td>ToshiCapital Rekordz Needs Help to Complete Album</td>\n",
       "      <td>Music</td>\n",
       "      <td>Music</td>\n",
       "      <td>USD</td>\n",
       "      <td>2012-04-16</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>2012-03-17 03:24:11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>US</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5000.00</td>\n",
       "      <td>29</td>\n",
       "      <td>-4999.00</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000014025</td>\n",
       "      <td>Monarch Espresso Bar</td>\n",
       "      <td>Restaurants</td>\n",
       "      <td>Food</td>\n",
       "      <td>USD</td>\n",
       "      <td>2016-04-01</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>2016-02-26 13:38:27</td>\n",
       "      <td>52375.0</td>\n",
       "      <td>1</td>\n",
       "      <td>224</td>\n",
       "      <td>US</td>\n",
       "      <td>52375.0</td>\n",
       "      <td>52375.0</td>\n",
       "      <td>50000.00</td>\n",
       "      <td>34</td>\n",
       "      <td>2375.00</td>\n",
       "      <td>233.816964</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ID                                               name  \\\n",
       "0  1000002330                    The Songs of Adelaide & Abullah   \n",
       "1  1000003930      Greeting From Earth: ZGAC Arts Capsule For ET   \n",
       "2  1000004038                                     Where is Hank?   \n",
       "3  1000007540  ToshiCapital Rekordz Needs Help to Complete Album   \n",
       "5  1000014025                               Monarch Espresso Bar   \n",
       "\n",
       "         category main_category currency   deadline     goal  \\\n",
       "0          Poetry    Publishing      GBP 2015-10-09   1000.0   \n",
       "1  Narrative Film  Film & Video      USD 2017-11-01  30000.0   \n",
       "2  Narrative Film  Film & Video      USD 2013-02-26  45000.0   \n",
       "3           Music         Music      USD 2012-04-16   5000.0   \n",
       "5     Restaurants          Food      USD 2016-04-01  50000.0   \n",
       "\n",
       "             launched  pledged  state  backers country  usd pledged  \\\n",
       "0 2015-08-11 12:12:28      0.0      0        0      GB          0.0   \n",
       "1 2017-09-02 04:43:57   2421.0      0       15      US        100.0   \n",
       "2 2013-01-12 00:20:50    220.0      0        3      US        220.0   \n",
       "3 2012-03-17 03:24:11      1.0      0        1      US          1.0   \n",
       "5 2016-02-26 13:38:27  52375.0      1      224      US      52375.0   \n",
       "\n",
       "   usd_pledged_real  usd_goal_real  time       gap  pledge_per_backer  \n",
       "0               0.0        1533.95    58  -1533.95                NaN  \n",
       "1            2421.0       30000.00    59 -27579.00         161.400000  \n",
       "2             220.0       45000.00    44 -44780.00          73.333333  \n",
       "3               1.0        5000.00    29  -4999.00           1.000000  \n",
       "5           52375.0       50000.00    34   2375.00         233.816964  "
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#change state to ternary\n",
    "#successful=1, failed=0, live=2\n",
    "df['state'] = df['state'].map({'successful':1, 'failed':0, 'live':2})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 334474 entries, 0 to 378660\n",
      "Data columns (total 18 columns):\n",
      "ID                   334474 non-null int64\n",
      "name                 334471 non-null object\n",
      "category             334474 non-null object\n",
      "main_category        334474 non-null object\n",
      "currency             334474 non-null object\n",
      "deadline             334474 non-null datetime64[ns]\n",
      "goal                 334474 non-null float64\n",
      "launched             334474 non-null datetime64[ns]\n",
      "pledged              334474 non-null float64\n",
      "state                334474 non-null int64\n",
      "backers              334474 non-null int64\n",
      "country              334474 non-null object\n",
      "usd pledged          334263 non-null float64\n",
      "usd_pledged_real     334474 non-null float64\n",
      "usd_goal_real        334474 non-null float64\n",
      "time                 334474 non-null int64\n",
      "gap                  334474 non-null float64\n",
      "pledge_per_backer    295269 non-null float64\n",
      "dtypes: datetime64[ns](2), float64(7), int64(4), object(5)\n",
      "memory usage: 48.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.replace([np.inf, -np.inf], np.nan)\n",
    "df = df.dropna()   #remove empty value, in particular on the pledge per backer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>goal</th>\n",
       "      <th>pledged</th>\n",
       "      <th>backers</th>\n",
       "      <th>usd pledged</th>\n",
       "      <th>usd_pledged_real</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>gap</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.073682e+09</td>\n",
       "      <td>61518.504629</td>\n",
       "      <td>1774.370589</td>\n",
       "      <td>20.424680</td>\n",
       "      <td>1409.240534</td>\n",
       "      <td>1642.181926</td>\n",
       "      <td>56599.965147</td>\n",
       "      <td>34.335583</td>\n",
       "      <td>-54957.783221</td>\n",
       "      <td>61.157880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.073765e+09</td>\n",
       "      <td>10166.109761</td>\n",
       "      <td>24094.387965</td>\n",
       "      <td>264.128397</td>\n",
       "      <td>17356.034449</td>\n",
       "      <td>22664.485818</td>\n",
       "      <td>9535.701785</td>\n",
       "      <td>31.156741</td>\n",
       "      <td>13128.784033</td>\n",
       "      <td>91.122497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.085969e+09</td>\n",
       "      <td>37717.416889</td>\n",
       "      <td>11302.039178</td>\n",
       "      <td>84.716000</td>\n",
       "      <td>1559.528720</td>\n",
       "      <td>7301.243564</td>\n",
       "      <td>23660.689298</td>\n",
       "      <td>38.580444</td>\n",
       "      <td>-16359.445733</td>\n",
       "      <td>79.928614</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 ID          goal       pledged     backers   usd pledged  \\\n",
       "state                                                                       \n",
       "0      1.073682e+09  61518.504629   1774.370589   20.424680   1409.240534   \n",
       "1      1.073765e+09  10166.109761  24094.387965  264.128397  17356.034449   \n",
       "2      1.085969e+09  37717.416889  11302.039178   84.716000   1559.528720   \n",
       "\n",
       "       usd_pledged_real  usd_goal_real       time           gap  \\\n",
       "state                                                             \n",
       "0           1642.181926   56599.965147  34.335583 -54957.783221   \n",
       "1          22664.485818    9535.701785  31.156741  13128.784033   \n",
       "2           7301.243564   23660.689298  38.580444 -16359.445733   \n",
       "\n",
       "       pledge_per_backer  \n",
       "state                     \n",
       "0              61.157880  \n",
       "1              91.122497  \n",
       "2              79.928614  "
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('state').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['backer_contribution'] = df['pledge_per_backer'] /  df['usd_goal_real']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>goal</th>\n",
       "      <th>pledged</th>\n",
       "      <th>backers</th>\n",
       "      <th>usd pledged</th>\n",
       "      <th>usd_pledged_real</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>gap</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.073682e+09</td>\n",
       "      <td>61518.504629</td>\n",
       "      <td>1774.370589</td>\n",
       "      <td>20.424680</td>\n",
       "      <td>1409.240534</td>\n",
       "      <td>1642.181926</td>\n",
       "      <td>56599.965147</td>\n",
       "      <td>34.335583</td>\n",
       "      <td>-54957.783221</td>\n",
       "      <td>61.157880</td>\n",
       "      <td>0.012156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.073765e+09</td>\n",
       "      <td>10166.109761</td>\n",
       "      <td>24094.387965</td>\n",
       "      <td>264.128397</td>\n",
       "      <td>17356.034449</td>\n",
       "      <td>22664.485818</td>\n",
       "      <td>9535.701785</td>\n",
       "      <td>31.156741</td>\n",
       "      <td>13128.784033</td>\n",
       "      <td>91.122497</td>\n",
       "      <td>0.138539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.085969e+09</td>\n",
       "      <td>37717.416889</td>\n",
       "      <td>11302.039178</td>\n",
       "      <td>84.716000</td>\n",
       "      <td>1559.528720</td>\n",
       "      <td>7301.243564</td>\n",
       "      <td>23660.689298</td>\n",
       "      <td>38.580444</td>\n",
       "      <td>-16359.445733</td>\n",
       "      <td>79.928614</td>\n",
       "      <td>0.143471</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 ID          goal       pledged     backers   usd pledged  \\\n",
       "state                                                                       \n",
       "0      1.073682e+09  61518.504629   1774.370589   20.424680   1409.240534   \n",
       "1      1.073765e+09  10166.109761  24094.387965  264.128397  17356.034449   \n",
       "2      1.085969e+09  37717.416889  11302.039178   84.716000   1559.528720   \n",
       "\n",
       "       usd_pledged_real  usd_goal_real       time           gap  \\\n",
       "state                                                             \n",
       "0           1642.181926   56599.965147  34.335583 -54957.783221   \n",
       "1          22664.485818    9535.701785  31.156741  13128.784033   \n",
       "2           7301.243564   23660.689298  38.580444 -16359.445733   \n",
       "\n",
       "       pledge_per_backer  backer_contribution  \n",
       "state                                          \n",
       "0              61.157880             0.012156  \n",
       "1              91.122497             0.138539  \n",
       "2              79.928614             0.143471  "
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('state').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Define dataset for regression analysis\n",
    "df_completed contains all the kickstarted succesful or failed\n",
    "df_live contains only those with status live"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>name</th>\n",
       "      <th>category</th>\n",
       "      <th>main_category</th>\n",
       "      <th>currency</th>\n",
       "      <th>deadline</th>\n",
       "      <th>goal</th>\n",
       "      <th>launched</th>\n",
       "      <th>pledged</th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>country</th>\n",
       "      <th>usd pledged</th>\n",
       "      <th>usd_pledged_real</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>gap</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000003930</td>\n",
       "      <td>Greeting From Earth: ZGAC Arts Capsule For ET</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2017-11-01</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>2017-09-02 04:43:57</td>\n",
       "      <td>2421.0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>US</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2421.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>59</td>\n",
       "      <td>-27579.0</td>\n",
       "      <td>161.400000</td>\n",
       "      <td>0.005380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000004038</td>\n",
       "      <td>Where is Hank?</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2013-02-26</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>2013-01-12 00:20:50</td>\n",
       "      <td>220.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>US</td>\n",
       "      <td>220.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>44</td>\n",
       "      <td>-44780.0</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>0.001630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000007540</td>\n",
       "      <td>ToshiCapital Rekordz Needs Help to Complete Album</td>\n",
       "      <td>Music</td>\n",
       "      <td>Music</td>\n",
       "      <td>USD</td>\n",
       "      <td>2012-04-16</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>2012-03-17 03:24:11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>US</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>29</td>\n",
       "      <td>-4999.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000014025</td>\n",
       "      <td>Monarch Espresso Bar</td>\n",
       "      <td>Restaurants</td>\n",
       "      <td>Food</td>\n",
       "      <td>USD</td>\n",
       "      <td>2016-04-01</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>2016-02-26 13:38:27</td>\n",
       "      <td>52375.0</td>\n",
       "      <td>1</td>\n",
       "      <td>224</td>\n",
       "      <td>US</td>\n",
       "      <td>52375.0</td>\n",
       "      <td>52375.0</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2375.0</td>\n",
       "      <td>233.816964</td>\n",
       "      <td>0.004676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000023410</td>\n",
       "      <td>Support Solar Roasted Coffee &amp; Green Energy!  ...</td>\n",
       "      <td>Food</td>\n",
       "      <td>Food</td>\n",
       "      <td>USD</td>\n",
       "      <td>2014-12-21</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>2014-12-01 18:30:44</td>\n",
       "      <td>1205.0</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>US</td>\n",
       "      <td>1205.0</td>\n",
       "      <td>1205.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>205.0</td>\n",
       "      <td>75.312500</td>\n",
       "      <td>0.075313</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ID                                               name  \\\n",
       "1  1000003930      Greeting From Earth: ZGAC Arts Capsule For ET   \n",
       "2  1000004038                                     Where is Hank?   \n",
       "3  1000007540  ToshiCapital Rekordz Needs Help to Complete Album   \n",
       "5  1000014025                               Monarch Espresso Bar   \n",
       "6  1000023410  Support Solar Roasted Coffee & Green Energy!  ...   \n",
       "\n",
       "         category main_category currency   deadline     goal  \\\n",
       "1  Narrative Film  Film & Video      USD 2017-11-01  30000.0   \n",
       "2  Narrative Film  Film & Video      USD 2013-02-26  45000.0   \n",
       "3           Music         Music      USD 2012-04-16   5000.0   \n",
       "5     Restaurants          Food      USD 2016-04-01  50000.0   \n",
       "6            Food          Food      USD 2014-12-21   1000.0   \n",
       "\n",
       "             launched  pledged  state  backers country  usd pledged  \\\n",
       "1 2017-09-02 04:43:57   2421.0      0       15      US        100.0   \n",
       "2 2013-01-12 00:20:50    220.0      0        3      US        220.0   \n",
       "3 2012-03-17 03:24:11      1.0      0        1      US          1.0   \n",
       "5 2016-02-26 13:38:27  52375.0      1      224      US      52375.0   \n",
       "6 2014-12-01 18:30:44   1205.0      1       16      US       1205.0   \n",
       "\n",
       "   usd_pledged_real  usd_goal_real  time      gap  pledge_per_backer  \\\n",
       "1            2421.0        30000.0    59 -27579.0         161.400000   \n",
       "2             220.0        45000.0    44 -44780.0          73.333333   \n",
       "3               1.0         5000.0    29  -4999.0           1.000000   \n",
       "5           52375.0        50000.0    34   2375.0         233.816964   \n",
       "6            1205.0         1000.0    19    205.0          75.312500   \n",
       "\n",
       "   backer_contribution  \n",
       "1             0.005380  \n",
       "2             0.001630  \n",
       "3             0.000200  \n",
       "5             0.004676  \n",
       "6             0.075313  "
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_completed = df[(df['state'] == 1) |  (df['state'] == 0)]\n",
    "df_completed.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_completed['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>name</th>\n",
       "      <th>category</th>\n",
       "      <th>main_category</th>\n",
       "      <th>currency</th>\n",
       "      <th>deadline</th>\n",
       "      <th>goal</th>\n",
       "      <th>launched</th>\n",
       "      <th>pledged</th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>country</th>\n",
       "      <th>usd pledged</th>\n",
       "      <th>usd_pledged_real</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>gap</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1000149007</td>\n",
       "      <td>Unschooling To University Book Project</td>\n",
       "      <td>Nonfiction</td>\n",
       "      <td>Publishing</td>\n",
       "      <td>CAD</td>\n",
       "      <td>2018-01-19</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>2017-11-20 18:15:14</td>\n",
       "      <td>592.0</td>\n",
       "      <td>2</td>\n",
       "      <td>24</td>\n",
       "      <td>CA</td>\n",
       "      <td>185.65</td>\n",
       "      <td>472.88</td>\n",
       "      <td>2396.36</td>\n",
       "      <td>59</td>\n",
       "      <td>-1923.48</td>\n",
       "      <td>19.703333</td>\n",
       "      <td>0.008222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>1000761521</td>\n",
       "      <td>KILOS.</td>\n",
       "      <td>Thrillers</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2018-02-06</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>2017-12-23 20:34:31</td>\n",
       "      <td>310.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>US</td>\n",
       "      <td>200.00</td>\n",
       "      <td>310.00</td>\n",
       "      <td>5000.00</td>\n",
       "      <td>44</td>\n",
       "      <td>-4690.00</td>\n",
       "      <td>77.500000</td>\n",
       "      <td>0.015500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>458</th>\n",
       "      <td>1002183790</td>\n",
       "      <td>The Man in the Field</td>\n",
       "      <td>Horror</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>GBP</td>\n",
       "      <td>2018-01-08</td>\n",
       "      <td>850.0</td>\n",
       "      <td>2017-12-21 11:19:18</td>\n",
       "      <td>413.0</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>GB</td>\n",
       "      <td>13.39</td>\n",
       "      <td>563.32</td>\n",
       "      <td>1159.38</td>\n",
       "      <td>17</td>\n",
       "      <td>-596.06</td>\n",
       "      <td>51.210909</td>\n",
       "      <td>0.044171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>1002599057</td>\n",
       "      <td>Dear Atlantas</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>USD</td>\n",
       "      <td>2018-02-16</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>2017-12-18 02:48:27</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>US</td>\n",
       "      <td>5.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2000.00</td>\n",
       "      <td>59</td>\n",
       "      <td>-1995.00</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.002500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>627</th>\n",
       "      <td>100301082</td>\n",
       "      <td>Feliz año nuevo, mamá.</td>\n",
       "      <td>Theater</td>\n",
       "      <td>Theater</td>\n",
       "      <td>MXN</td>\n",
       "      <td>2018-02-04</td>\n",
       "      <td>49000.0</td>\n",
       "      <td>2017-12-06 03:36:06</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>MX</td>\n",
       "      <td>53.52</td>\n",
       "      <td>52.32</td>\n",
       "      <td>2563.83</td>\n",
       "      <td>59</td>\n",
       "      <td>-2511.51</td>\n",
       "      <td>26.160000</td>\n",
       "      <td>0.010203</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             ID                                    name      category  \\\n",
       "40   1000149007  Unschooling To University Book Project    Nonfiction   \n",
       "183  1000761521                                  KILOS.     Thrillers   \n",
       "458  1002183790                    The Man in the Field        Horror   \n",
       "537  1002599057                           Dear Atlantas  Film & Video   \n",
       "627   100301082                  Feliz año nuevo, mamá.       Theater   \n",
       "\n",
       "    main_category currency   deadline     goal            launched  pledged  \\\n",
       "40     Publishing      CAD 2018-01-19   3000.0 2017-11-20 18:15:14    592.0   \n",
       "183  Film & Video      USD 2018-02-06   5000.0 2017-12-23 20:34:31    310.0   \n",
       "458  Film & Video      GBP 2018-01-08    850.0 2017-12-21 11:19:18    413.0   \n",
       "537  Film & Video      USD 2018-02-16   2000.0 2017-12-18 02:48:27      5.0   \n",
       "627       Theater      MXN 2018-02-04  49000.0 2017-12-06 03:36:06   1000.0   \n",
       "\n",
       "     state  backers country  usd pledged  usd_pledged_real  usd_goal_real  \\\n",
       "40       2       24      CA       185.65            472.88        2396.36   \n",
       "183      2        4      US       200.00            310.00        5000.00   \n",
       "458      2       11      GB        13.39            563.32        1159.38   \n",
       "537      2        1      US         5.00              5.00        2000.00   \n",
       "627      2        2      MX        53.52             52.32        2563.83   \n",
       "\n",
       "     time      gap  pledge_per_backer  backer_contribution  \n",
       "40     59 -1923.48          19.703333             0.008222  \n",
       "183    44 -4690.00          77.500000             0.015500  \n",
       "458    17  -596.06          51.210909             0.044171  \n",
       "537    59 -1995.00           5.000000             0.002500  \n",
       "627    59 -2511.51          26.160000             0.010203  "
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_live = df[(df['state'] == 2)]\n",
    "df_live.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2])"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_live['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Film & Video', 'Music', 'Food', 'Games', 'Design', 'Comics',\n",
       "       'Publishing', 'Fashion', 'Theater', 'Art', 'Photography', 'Crafts',\n",
       "       'Technology', 'Journalism', 'Dance'], dtype=object)"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['main_category'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2])"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'name', 'category', 'main_category', 'currency', 'deadline',\n",
       "       'goal', 'launched', 'pledged', 'state', 'backers', 'country',\n",
       "       'usd pledged', 'usd_pledged_real', 'usd_goal_real', 'time', 'gap',\n",
       "       'pledge_per_backer', 'backer_contribution'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_completed.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(292825, 19)"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_completed.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_category</th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>gap</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>59</td>\n",
       "      <td>-27579.0</td>\n",
       "      <td>161.400000</td>\n",
       "      <td>0.005380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Film &amp; Video</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>44</td>\n",
       "      <td>-44780.0</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>0.001630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Music</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>29</td>\n",
       "      <td>-4999.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Food</td>\n",
       "      <td>1</td>\n",
       "      <td>224</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2375.0</td>\n",
       "      <td>233.816964</td>\n",
       "      <td>0.004676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Food</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>205.0</td>\n",
       "      <td>75.312500</td>\n",
       "      <td>0.075313</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  main_category  state  backers  usd_goal_real  time      gap  \\\n",
       "1  Film & Video      0       15        30000.0    59 -27579.0   \n",
       "2  Film & Video      0        3        45000.0    44 -44780.0   \n",
       "3         Music      0        1         5000.0    29  -4999.0   \n",
       "5          Food      1      224        50000.0    34   2375.0   \n",
       "6          Food      1       16         1000.0    19    205.0   \n",
       "\n",
       "   pledge_per_backer  backer_contribution  \n",
       "1         161.400000             0.005380  \n",
       "2          73.333333             0.001630  \n",
       "3           1.000000             0.000200  \n",
       "5         233.816964             0.004676  \n",
       "6          75.312500             0.075313  "
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_completed_d = df_completed.drop(\n",
    "    ['ID', 'name', 'category', 'currency', 'pledged', \n",
    "     'usd pledged', 'country', 'launched', \n",
    "     'deadline', 'goal', 'usd_pledged_real'], axis = 1)\n",
    "\n",
    "df_completed_d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2250 entries, 40 to 378512\n",
      "Data columns (total 19 columns):\n",
      "ID                     2250 non-null int64\n",
      "name                   2250 non-null object\n",
      "category               2250 non-null object\n",
      "main_category          2250 non-null object\n",
      "currency               2250 non-null object\n",
      "deadline               2250 non-null datetime64[ns]\n",
      "goal                   2250 non-null float64\n",
      "launched               2250 non-null datetime64[ns]\n",
      "pledged                2250 non-null float64\n",
      "state                  2250 non-null int64\n",
      "backers                2250 non-null int64\n",
      "country                2250 non-null object\n",
      "usd pledged            2250 non-null float64\n",
      "usd_pledged_real       2250 non-null float64\n",
      "usd_goal_real          2250 non-null float64\n",
      "time                   2250 non-null int64\n",
      "gap                    2250 non-null float64\n",
      "pledge_per_backer      2250 non-null float64\n",
      "backer_contribution    2250 non-null float64\n",
      "dtypes: datetime64[ns](2), float64(8), int64(4), object(5)\n",
      "memory usage: 351.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df_live.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 292825 entries, 1 to 378660\n",
      "Data columns (total 19 columns):\n",
      "ID                     292825 non-null int64\n",
      "name                   292825 non-null object\n",
      "category               292825 non-null object\n",
      "main_category          292825 non-null object\n",
      "currency               292825 non-null object\n",
      "deadline               292825 non-null datetime64[ns]\n",
      "goal                   292825 non-null float64\n",
      "launched               292825 non-null datetime64[ns]\n",
      "pledged                292825 non-null float64\n",
      "state                  292825 non-null int64\n",
      "backers                292825 non-null int64\n",
      "country                292825 non-null object\n",
      "usd pledged            292825 non-null float64\n",
      "usd_pledged_real       292825 non-null float64\n",
      "usd_goal_real          292825 non-null float64\n",
      "time                   292825 non-null int64\n",
      "gap                    292825 non-null float64\n",
      "pledge_per_backer      292825 non-null float64\n",
      "backer_contribution    292825 non-null float64\n",
      "dtypes: datetime64[ns](2), float64(8), int64(4), object(5)\n",
      "memory usage: 44.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df_completed.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table = pd.crosstab(df.main_category,df.state)\n",
    "table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True, figsize=(20,10))\n",
    "plt.title('Stacked Bar Chart of Main Categories vs State')\n",
    "plt.xlabel('Main Category')\n",
    "plt.ylabel('Proportion of Kickstarters')\n",
    "plt.savefig('cat_vs_state_stack')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABJIAAAJfCAYAAAAkS/xPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzs3X28pWVdL/7PF8HwYQBFLGFAMKEAkQcHH9JjYqKCiaVlIpaoxS/TtOND6qmTaOopT5qRptkxJU+AqJUcBFQU1EiUpwTEVBKMAR8AFXlwEPH7+2Ot0c2evffczOy1Z82e9/v1mtes+7qvdd/fe601M3t95rquu7o7AAAAALA+W23qAgAAAADYPAiSAAAAABhEkAQAAADAIIIkAAAAAAYRJAEAAAAwiCAJAAAAgEEESQDAgqrqPVX1ukU6VlfVAxfjWJNQVWdX1W9v6jrWqqqfrqpPVdWNVfWmO/nc/1ZVX5pUbQDAlkmQBACbqap6VFX9W1XdUFXfrqpzqurg8b6jq+pfN3WNd8Y4xFlTVTeNr+lTVbXfIp/jrlV1bFV9papurqorq+rvq2r3xTzPjPNtbAh3TJLrkmzX3S+ddezTx6/VTVV1W1X9YMb2O7r70939cxt1AUuoqnYYvxffGAdnX66qV8zYf6dCyGkLBQFguRAkAcBmqKq2S3Jqkr9Ocu8kuyR5TZJbN2Vdi+CF3X3PJDsmOTvJezfkIFW19Ty7PpDkiCTPTLJ9kv2TXJDklzbkPOup4S6LcJj7J7msu3v2ju4+rLvvOX69/jHJG9dud/fvLsK5l9pfJrlnkr0zem+OSPKfm7QiAGAdgiQA2DztlSTdfWJ3397d3+/uj3b3xVW1d5J3JHnEeHTKd5Okqp5UVRdV1feq6qqqOnbmAWeMcPrueP/Rs09aVSuq6qyqOq5Gfqqq/qKq/quqvllV76iqu83o//Kq+npVXVNVzx16cd39wyQnJdlnxrEeWlWfGdf39ap6a1Xddcb+rqoXVNVXknxljtofl+TQJE/p7vO6+4fdfUN3v6273zWj6/3Ho7turKqPVtV9Zhzj/eMRM2tHTO07Y997qurtVXVaVd2c5HlJjkryh+P34f/Nda1V9QtVdd74mOdV1S+sPV6SZ894/uOGvn7j5z+mqlbP2L5y/H5cPB6N9a7x1LnTx9d6ZlXda0b/h8/4PHy+qh4zz3leWVUfmNX2V1V13Pjx0VX11fE5rqiqo+Yp+eAkJ3T3d7r7R939H939gfExPjXu8/nxa/EbVXWvqjq1qq6tqu+MH68c9399kv+W5K3j/m8dt/98VX2sRiP4vlRVT78zrykAIEgCgM3Vl5PcXlXHV9VhMwOA7v5ikt9N8pnx6JQdxrtuTvJbSXZI8qQkz6+qX0mSqtotyekZjXDaKckBSf595gmrasckH09yTne/aDxK5s8zCrUOSPLAjEZG/cm4/xOTvCyj8GbPJIODkHFAdFSSc2c0357kvye5T5JHZDSK6PdmPfVXkjwsMwKoGR6X5HPdfdV6Tv/MJM9Jct8kdx1fw1qnZ3Qt901yYUYjgWY/9/VJViT5h9xxpNCT57jOeyf5cJLjMhqF9eYkH66qHbv76FnPP3M9dQ/xtIzej72SPHl8Pf8jo9d0qyQvGte1y7iu12U04u1lST5YVTvNccwTkxw+HiW3diTW05OcUFX3GF/bYd29IskvZNbnaoZzk7y+qp5TVXvO3NHdjx4/3H/8WrxvXO+7Mxq1tVuS7yd567j/HyX5dMYj3Lr7heNaPpbkhIzevyOT/M3MMBAAWD9BEgBshrr7e0kelaST/F2Sa6vqlKr66QWec3Z3XzIe7XFxRgHAL453H5XkzPEIp9u6+/runvmFf+ckn0zy/u7+4ySpqkryO0n+e3d/u7tvTPKGJM8YP+fpSd7d3Zd2981Jjh1wacfVaATVTUlemNF0vbX1X9Dd545HEl2Z5G9n1L/W/xrX8v05jr1jkq8PqOHd3f3l8TFOzigkW1vD33f3jd196/h69q+q7Wc890Pdfc74NV4z4FxPSvKV7n7v+LpOTPIfGYU8k/DX3f3N7r46o6Dls9190fh6/jnJgeN+z0pyWnefNr6WjyU5P8nhsw/Y3V/LKFT7lXHTY5Pc0t1rQ8AfJXlQVd2tu7/e3V+Yp7bfzyg4e2GSy6rq8qo6bL4LGX9GP9jdt4w/e6/Pup+HmX45yZXd/e7xa31hkg8m+bUFngMAzCJIAoDNVHd/sbuP7u6VSR6UUdjzlvn6V9XDxtPSrq2qGzIatbR22tauWXg9micluVtGU+bW2inJ3ZNcMJ7+9N0kZ4zbM65n5uifrw24rBeNR1Btm9EX/w9U1YPH9e81nr70jar6Xkah1X1mPX+h0UbXJ7nfgBq+MePxLRmt25OquktV/VlV/ef4/FeO+8ysYX2jnWbbOeu+Ll/LaGTXJHxzxuPvz7F9z/Hj+yf59bXv6/i9fVTmf/1OyGiETzIalXVCkowDxN/I6LP29ar6cFX9/FwHGE/PfEN3PySj0O/kJO8fj9paR1Xdvar+tqq+Nn4/PpVkh5p/bar7J3nYrGs6KsnPzNMfAJiDIAkAloHu/o8k78koUEpGI5VmOyHJKUl27e7tMwqFarzvqiQ/u8Ap/i6jkOi08RShZHQ3se8n2be7dxj/2n68+HMyGv2z64xj7HYnrudH3f3pJJcnefy4+e0ZjdbZs7u3y2hKVs1+6gKHPTPJQ9euo7MBnpnkKRlNkds+ye7j9pk1zD7/QvUkyTUZBRwz7Zbk6g0rcdFcleS9M97XHbr7Ht39Z/P0f3+Sx4xf21/NOEhKku7+SHcfmlEI9R8ZfZYWNB5x94Yk90iyxzzdXprk55I8bPx5WDv9be37Mfu1vyrJJ2dd0z27+/nrqwcA+AlBEgBshsaLBr90xuLCu2Y0ImTtdKJvJllZMxajzmjdnm9395qqemhGwcha/5jkcVX19Krauqp2rKoDckcvTPKlJKeOpyn9KKNQ4C+r6r7jOnapqieM+5+c5Oiq2qeq7p7k1XfyGh+R0VpHa6dCrUjyvSQ3jUe13KkAYLzG0MeS/HNVPWR8nSuq6ndr2ELgKzK6K971GY3EesOA53wzyQMW2H9akr2q6pnjen4jo2s+dcCxJ+n/JnlyVT1hPBJr2xot3j1nCNfd12Z0l713J7livE5XarSY9xHj8PHWjKYs3j7XMarqf1bVwVV116raNsmLk3w3o89csu5ruSKjIPO741FLsz9fs/ufmtFr/ZtVtc3418E1WpweABhIkAQAm6cbM1pU+rM1ukPYuUkuzWiURpJ8IqMA5htVdd247feSvLaqbsxoQeyT1x6su/8ro/VvXprk2xktiLz/zBOOF9c+JqORHR8af9l/RUajhs4dTy86M6NRIunu0zOaaveJcZ9PDLiutXfZuinJe5P88fg4yWjB52eOr/3vkrxvwPFm+7WMwpv3Jbkho9ds1bju9fmHjKadXZ3kstxxIfD5vCvJPuOpVP8ye2d3X5/RFL6XZhRQ/WGSX+7u62b3XUrjBcmfktGor2szes9fnoV/djwho9FaJ8xo2yqja7smo8/VL2bdBdJ/fNqMgqjrxv0PTfKk7r5pvP/YJMePX8unZ/TZutu4/7kZjZib6a+S/FqN7uh23HgdpcdntIbXNRlNYfzzJD+1wDUBALPU6GdCAAAAAFiYEUkAAAAADCJIAgAAAGAQQRIAAAAAgwiSAAAAABhk601dwJ11n/vcp3ffffdNXQYAAADAsnHBBRdc1907ra/fZhck7b777jn//PM3dRkAAAAAy0ZVfW1IP1PbAAAAABhEkAQAAADAIIIkAAAAAAbZ7NZIAgAAAJhGt912W1avXp01a9Zs6lLmte2222blypXZZpttNuj5giQAAACARbB69eqsWLEiu+++e6pqU5ezju7O9ddfn9WrV2ePPfbYoGOY2gYAAACwCNasWZMdd9xxKkOkJKmq7Ljjjhs1YkqQBAAAALBIpjVEWmtj6xMkAQAAADCIIAkAAABgE3rLW96SW265ZdH6TZIgCQAAAGATEiQBAAAAsI6bb745T3rSk7L//vvnQQ96UF7zmtfkmmuuySGHHJJDDjkkSfL85z8/q1atyr777ptXv/rVSZLjjjtunX4f/ehH84hHPCIHHXRQfv3Xfz033XTTxOsXJAEAAAAskTPOOCM777xzPv/5z+fSSy/NH/zBH2TnnXfOWWedlbPOOitJ8vrXvz7nn39+Lr744nzyk5/MxRdfnBe96EV36Hfdddflda97Xc4888xceOGFWbVqVd785jdPvH5BEgAAAMAS2W+//XLmmWfmFa94RT796U9n++23X6fPySefnIMOOigHHnhgvvCFL+Syyy5bp8+5556byy67LI985CNzwAEH5Pjjj8/Xvva1ide/9cTPAAAAAECSZK+99soFF1yQ0047La961avy+Mc//g77r7jiivzFX/xFzjvvvNzrXvfK0UcfnTVr1qxznO7OoYcemhNPPHGpSk9iRBIAAADAkrnmmmty97vfPc961rPyspe9LBdeeGFWrFiRG2+8MUnyve99L/e4xz2y/fbb55vf/GZOP/30Hz93Zr+HP/zhOeecc3L55ZcnSW655ZZ8+ctfnnj9RiQBAAAALJFLLrkkL3/5y7PVVltlm222ydvf/vZ85jOfyWGHHZb73e9+Oeuss3LggQdm3333zQMe8IA88pGP/PFzjznmmDv0e8973pMjjzwyt956a5Lkda97Xfbaa6+J1l/dPdET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\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table = pd.crosstab(df.time,df.state)\n",
    "tb = table.div(table.sum(1).astype(float), axis=0)\n",
    "#print(tb)\n",
    "#tb.plot(figsize=(10,20))\n",
    "tb.plot(figsize=(20,10), kind='bar', stacked=True)\n",
    "plt.title('Stacked Bar Chart of Time vs State')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Proportion of Kickstarters')\n",
    "plt.savefig('tim_vs_state_stack')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table = pd.crosstab(df.backers,df.state)\n",
    "tb = table.div(table.sum(1).astype(float), axis=0)\n",
    "#print(tb)\n",
    "#tb.plot(figsize=(10,20))\n",
    "tb.plot(figsize=(30,5), kind='bar', stacked=True)\n",
    "plt.title('Stacked Bar Chart of Backers vs State')\n",
    "plt.xlabel('Backers')\n",
    "plt.ylabel('Proportion of Kickstarters')\n",
    "plt.savefig('back_vs_state_stack')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['backer_group'] = round(df['backers'] / 100) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_b = df[df['backer_group'] < 10000]\n",
    "\n",
    "table = pd.crosstab(df_b.backer_group,df_b.state)\n",
    "tb = table.div(table.sum(1).astype(float), axis=0)\n",
    "#print(tb)\n",
    "#tb.plot(figsize=(10,20))\n",
    "tb.plot(figsize=(20,10), kind='bar', stacked=True)\n",
    "plt.title('Stacked Bar Chart of Backers vs State')\n",
    "plt.xlabel('Backers')\n",
    "plt.ylabel('Proportion of Kickstarters')\n",
    "plt.savefig('back_vs_state_stack')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>name</th>\n",
       "      <th>category</th>\n",
       "      <th>currency</th>\n",
       "      <th>deadline</th>\n",
       "      <th>goal</th>\n",
       "      <th>launched</th>\n",
       "      <th>pledged</th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>...</th>\n",
       "      <th>main_category_Fashion</th>\n",
       "      <th>main_category_Film &amp; Video</th>\n",
       "      <th>main_category_Food</th>\n",
       "      <th>main_category_Games</th>\n",
       "      <th>main_category_Journalism</th>\n",
       "      <th>main_category_Music</th>\n",
       "      <th>main_category_Photography</th>\n",
       "      <th>main_category_Publishing</th>\n",
       "      <th>main_category_Technology</th>\n",
       "      <th>main_category_Theater</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000003930</td>\n",
       "      <td>Greeting From Earth: ZGAC Arts Capsule For ET</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>USD</td>\n",
       "      <td>2017-11-01</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>2017-09-02 04:43:57</td>\n",
       "      <td>2421.0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000004038</td>\n",
       "      <td>Where is Hank?</td>\n",
       "      <td>Narrative Film</td>\n",
       "      <td>USD</td>\n",
       "      <td>2013-02-26</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>2013-01-12 00:20:50</td>\n",
       "      <td>220.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000007540</td>\n",
       "      <td>ToshiCapital Rekordz Needs Help to Complete Album</td>\n",
       "      <td>Music</td>\n",
       "      <td>USD</td>\n",
       "      <td>2012-04-16</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>2012-03-17 03:24:11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000014025</td>\n",
       "      <td>Monarch Espresso Bar</td>\n",
       "      <td>Restaurants</td>\n",
       "      <td>USD</td>\n",
       "      <td>2016-04-01</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>2016-02-26 13:38:27</td>\n",
       "      <td>52375.0</td>\n",
       "      <td>1</td>\n",
       "      <td>224</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000023410</td>\n",
       "      <td>Support Solar Roasted Coffee &amp; Green Energy!  ...</td>\n",
       "      <td>Food</td>\n",
       "      <td>USD</td>\n",
       "      <td>2014-12-21</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>2014-12-01 18:30:44</td>\n",
       "      <td>1205.0</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           ID                                               name  \\\n",
       "1  1000003930      Greeting From Earth: ZGAC Arts Capsule For ET   \n",
       "2  1000004038                                     Where is Hank?   \n",
       "3  1000007540  ToshiCapital Rekordz Needs Help to Complete Album   \n",
       "5  1000014025                               Monarch Espresso Bar   \n",
       "6  1000023410  Support Solar Roasted Coffee & Green Energy!  ...   \n",
       "\n",
       "         category currency   deadline     goal            launched  pledged  \\\n",
       "1  Narrative Film      USD 2017-11-01  30000.0 2017-09-02 04:43:57   2421.0   \n",
       "2  Narrative Film      USD 2013-02-26  45000.0 2013-01-12 00:20:50    220.0   \n",
       "3           Music      USD 2012-04-16   5000.0 2012-03-17 03:24:11      1.0   \n",
       "5     Restaurants      USD 2016-04-01  50000.0 2016-02-26 13:38:27  52375.0   \n",
       "6            Food      USD 2014-12-21   1000.0 2014-12-01 18:30:44   1205.0   \n",
       "\n",
       "   state  backers          ...           main_category_Fashion  \\\n",
       "1      0       15          ...                               0   \n",
       "2      0        3          ...                               0   \n",
       "3      0        1          ...                               0   \n",
       "5      1      224          ...                               0   \n",
       "6      1       16          ...                               0   \n",
       "\n",
       "   main_category_Film & Video  main_category_Food  main_category_Games  \\\n",
       "1                           1                   0                    0   \n",
       "2                           1                   0                    0   \n",
       "3                           0                   0                    0   \n",
       "5                           0                   1                    0   \n",
       "6                           0                   1                    0   \n",
       "\n",
       "   main_category_Journalism  main_category_Music  main_category_Photography  \\\n",
       "1                         0                    0                          0   \n",
       "2                         0                    0                          0   \n",
       "3                         0                    1                          0   \n",
       "5                         0                    0                          0   \n",
       "6                         0                    0                          0   \n",
       "\n",
       "   main_category_Publishing  main_category_Technology  main_category_Theater  \n",
       "1                         0                         0                      0  \n",
       "2                         0                         0                      0  \n",
       "3                         0                         0                      0  \n",
       "5                         0                         0                      0  \n",
       "6                         0                         0                      0  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeldf = pd.get_dummies(data = df_completed, columns = ['main_category'])\n",
    "modeldf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "      <th>main_category_Art</th>\n",
       "      <th>main_category_Comics</th>\n",
       "      <th>main_category_Crafts</th>\n",
       "      <th>main_category_Dance</th>\n",
       "      <th>...</th>\n",
       "      <th>main_category_Fashion</th>\n",
       "      <th>main_category_Film &amp; Video</th>\n",
       "      <th>main_category_Food</th>\n",
       "      <th>main_category_Games</th>\n",
       "      <th>main_category_Journalism</th>\n",
       "      <th>main_category_Music</th>\n",
       "      <th>main_category_Photography</th>\n",
       "      <th>main_category_Publishing</th>\n",
       "      <th>main_category_Technology</th>\n",
       "      <th>main_category_Theater</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>59</td>\n",
       "      <td>161.400000</td>\n",
       "      <td>0.005380</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>44</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>0.001630</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>224</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>34</td>\n",
       "      <td>233.816964</td>\n",
       "      <td>0.004676</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>75.312500</td>\n",
       "      <td>0.075313</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   state  backers  usd_goal_real  time  pledge_per_backer  \\\n",
       "1      0       15        30000.0    59         161.400000   \n",
       "2      0        3        45000.0    44          73.333333   \n",
       "3      0        1         5000.0    29           1.000000   \n",
       "5      1      224        50000.0    34         233.816964   \n",
       "6      1       16         1000.0    19          75.312500   \n",
       "\n",
       "   backer_contribution  main_category_Art  main_category_Comics  \\\n",
       "1             0.005380                  0                     0   \n",
       "2             0.001630                  0                     0   \n",
       "3             0.000200                  0                     0   \n",
       "5             0.004676                  0                     0   \n",
       "6             0.075313                  0                     0   \n",
       "\n",
       "   main_category_Crafts  main_category_Dance          ...            \\\n",
       "1                     0                    0          ...             \n",
       "2                     0                    0          ...             \n",
       "3                     0                    0          ...             \n",
       "5                     0                    0          ...             \n",
       "6                     0                    0          ...             \n",
       "\n",
       "   main_category_Fashion  main_category_Film & Video  main_category_Food  \\\n",
       "1                      0                           1                   0   \n",
       "2                      0                           1                   0   \n",
       "3                      0                           0                   0   \n",
       "5                      0                           0                   1   \n",
       "6                      0                           0                   1   \n",
       "\n",
       "   main_category_Games  main_category_Journalism  main_category_Music  \\\n",
       "1                    0                         0                    0   \n",
       "2                    0                         0                    0   \n",
       "3                    0                         0                    1   \n",
       "5                    0                         0                    0   \n",
       "6                    0                         0                    0   \n",
       "\n",
       "   main_category_Photography  main_category_Publishing  \\\n",
       "1                          0                         0   \n",
       "2                          0                         0   \n",
       "3                          0                         0   \n",
       "5                          0                         0   \n",
       "6                          0                         0   \n",
       "\n",
       "   main_category_Technology  main_category_Theater  \n",
       "1                         0                      0  \n",
       "2                         0                      0  \n",
       "3                         0                      0  \n",
       "5                         0                      0  \n",
       "6                         0                      0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeldf_d = modeldf.drop(\n",
    "    ['ID', 'name', 'category', 'currency', 'pledged', \n",
    "     'usd pledged', 'country', 'launched', \n",
    "     'deadline', 'goal', 'usd_pledged_real', 'gap'], axis = 1)\n",
    "\n",
    "modeldf_d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "#modeldfn = modeldf._get_numeric_data()\n",
    "modeldf_d = modeldf_d.replace([np.inf, -np.inf], np.nan)\n",
    "modeldf_d = modeldf_d.dropna()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000.0\n"
     ]
    }
   ],
   "source": [
    "print(modeldf_d['pledge_per_backer'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "#modeldf = dfnf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 292825 entries, 1 to 378660\n",
      "Data columns (total 21 columns):\n",
      "state                         292825 non-null int64\n",
      "backers                       292825 non-null int64\n",
      "usd_goal_real                 292825 non-null float64\n",
      "time                          292825 non-null int64\n",
      "pledge_per_backer             292825 non-null float64\n",
      "backer_contribution           292825 non-null float64\n",
      "main_category_Art             292825 non-null int64\n",
      "main_category_Comics          292825 non-null int64\n",
      "main_category_Crafts          292825 non-null int64\n",
      "main_category_Dance           292825 non-null int64\n",
      "main_category_Design          292825 non-null int64\n",
      "main_category_Fashion         292825 non-null int64\n",
      "main_category_Film & Video    292825 non-null int64\n",
      "main_category_Food            292825 non-null int64\n",
      "main_category_Games           292825 non-null int64\n",
      "main_category_Journalism      292825 non-null int64\n",
      "main_category_Music           292825 non-null int64\n",
      "main_category_Photography     292825 non-null int64\n",
      "main_category_Publishing      292825 non-null int64\n",
      "main_category_Technology      292825 non-null int64\n",
      "main_category_Theater         292825 non-null int64\n",
      "dtypes: float64(3), int64(18)\n",
      "memory usage: 49.1 MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "((292825, 21), None)"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeldf_d.shape, modeldf_d.info() #, modeldf_d.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pd.Series(delta.days for delta in (modeldf['deadline'] - modeldf['launched']))\n",
    "modeldf_d = modeldf_d.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "state                         0\n",
       "backers                       0\n",
       "usd_goal_real                 0\n",
       "time                          0\n",
       "pledge_per_backer             0\n",
       "backer_contribution           0\n",
       "main_category_Art             0\n",
       "main_category_Comics          0\n",
       "main_category_Crafts          0\n",
       "main_category_Dance           0\n",
       "main_category_Design          0\n",
       "main_category_Fashion         0\n",
       "main_category_Film & Video    0\n",
       "main_category_Food            0\n",
       "main_category_Games           0\n",
       "main_category_Journalism      0\n",
       "main_category_Music           0\n",
       "main_category_Photography     0\n",
       "main_category_Publishing      0\n",
       "main_category_Technology      0\n",
       "main_category_Theater         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeldf_d.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = modeldf_d['state']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = modeldf_d.drop(['state'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/daniel/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='warn',\n",
       "          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n",
       "          tol=0.0001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogReg  = LogisticRegression()\n",
    "LogReg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9293648083326219"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#accuracy score of model using training data\n",
    "LogReg.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 ... 0 1 1]\n"
     ]
    }
   ],
   "source": [
    "#generate prediction values\n",
    "y_pred = LogReg.predict(X_test)\n",
    "print(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predicted Not Successful</th>\n",
       "      <th>Predicted Successful</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>True Not Successful</th>\n",
       "      <td>29421</td>\n",
       "      <td>2417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True Successful</th>\n",
       "      <td>1809</td>\n",
       "      <td>24918</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Predicted Not Successful  Predicted Successful\n",
       "True Not Successful                     29421                  2417\n",
       "True Successful                          1809                 24918"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Confusion matrix shows which values model predicted correctly vs incorrectly\n",
    "\n",
    "cm = pd.DataFrame(\n",
    "    confusion_matrix(y_test, y_pred),\n",
    "    columns=['Predicted Not Successful', 'Predicted Successful'],\n",
    "    index=['True Not Successful', 'True Successful']\n",
    ")\n",
    "\n",
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.927840860582259"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#accuracy score of model on test data\n",
    "LogReg.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.92      0.93     31838\n",
      "           1       0.91      0.93      0.92     26727\n",
      "\n",
      "   micro avg       0.93      0.93      0.93     58565\n",
      "   macro avg       0.93      0.93      0.93     58565\n",
      "weighted avg       0.93      0.93      0.93     58565\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#from precision column, model is better at predicting passengers that do not survive\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# On the live results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "#generate prediction values\n",
    "Live = X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/daniel/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "Live['Prediction'] = LogReg.predict(Live)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>backers</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "      <th>main_category_Art</th>\n",
       "      <th>main_category_Comics</th>\n",
       "      <th>main_category_Crafts</th>\n",
       "      <th>main_category_Dance</th>\n",
       "      <th>main_category_Design</th>\n",
       "      <th>...</th>\n",
       "      <th>main_category_Film &amp; Video</th>\n",
       "      <th>main_category_Food</th>\n",
       "      <th>main_category_Games</th>\n",
       "      <th>main_category_Journalism</th>\n",
       "      <th>main_category_Music</th>\n",
       "      <th>main_category_Photography</th>\n",
       "      <th>main_category_Publishing</th>\n",
       "      <th>main_category_Technology</th>\n",
       "      <th>main_category_Theater</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>295659</th>\n",
       "      <td>32</td>\n",
       "      <td>7500.0</td>\n",
       "      <td>30</td>\n",
       "      <td>36.343750</td>\n",
       "      <td>0.004846</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289164</th>\n",
       "      <td>1</td>\n",
       "      <td>500.0</td>\n",
       "      <td>29</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63177</th>\n",
       "      <td>156</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>11</td>\n",
       "      <td>34.807372</td>\n",
       "      <td>0.017404</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162483</th>\n",
       "      <td>4</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>59</td>\n",
       "      <td>102.500000</td>\n",
       "      <td>0.008542</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358182</th>\n",
       "      <td>62</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>29</td>\n",
       "      <td>104.177419</td>\n",
       "      <td>0.018941</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        backers  usd_goal_real  time  pledge_per_backer  backer_contribution  \\\n",
       "295659       32         7500.0    30          36.343750             0.004846   \n",
       "289164        1          500.0    29          15.000000             0.030000   \n",
       "63177       156         2000.0    11          34.807372             0.017404   \n",
       "162483        4        12000.0    59         102.500000             0.008542   \n",
       "358182       62         5500.0    29         104.177419             0.018941   \n",
       "\n",
       "        main_category_Art  main_category_Comics  main_category_Crafts  \\\n",
       "295659                  0                     0                     0   \n",
       "289164                  0                     0                     0   \n",
       "63177                   1                     0                     0   \n",
       "162483                  0                     0                     0   \n",
       "358182                  0                     0                     0   \n",
       "\n",
       "        main_category_Dance  main_category_Design     ...      \\\n",
       "295659                    0                     0     ...       \n",
       "289164                    0                     0     ...       \n",
       "63177                     0                     0     ...       \n",
       "162483                    0                     0     ...       \n",
       "358182                    0                     0     ...       \n",
       "\n",
       "        main_category_Film & Video  main_category_Food  main_category_Games  \\\n",
       "295659                           0                   0                    0   \n",
       "289164                           0                   0                    0   \n",
       "63177                            0                   0                    0   \n",
       "162483                           1                   0                    0   \n",
       "358182                           1                   0                    0   \n",
       "\n",
       "        main_category_Journalism  main_category_Music  \\\n",
       "295659                         1                    0   \n",
       "289164                         0                    1   \n",
       "63177                          0                    0   \n",
       "162483                         0                    0   \n",
       "358182                         0                    0   \n",
       "\n",
       "        main_category_Photography  main_category_Publishing  \\\n",
       "295659                          0                         0   \n",
       "289164                          0                         0   \n",
       "63177                           0                         0   \n",
       "162483                          0                         0   \n",
       "358182                          0                         0   \n",
       "\n",
       "        main_category_Technology  main_category_Theater  Prediction  \n",
       "295659                         0                      0           0  \n",
       "289164                         0                      0           0  \n",
       "63177                          0                      0           1  \n",
       "162483                         0                      0           0  \n",
       "358182                         0                      0           1  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Live.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['backers', 'usd_goal_real', 'time', 'pledge_per_backer',\n",
       "       'backer_contribution', 'main_category_Art', 'main_category_Comics',\n",
       "       'main_category_Crafts', 'main_category_Dance', 'main_category_Design',\n",
       "       'main_category_Fashion', 'main_category_Film & Video',\n",
       "       'main_category_Food', 'main_category_Games', 'main_category_Journalism',\n",
       "       'main_category_Music', 'main_category_Photography',\n",
       "       'main_category_Publishing', 'main_category_Technology',\n",
       "       'main_category_Theater', 'Prediction'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Live.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(data = Live, columns=['backers', 'usd_goal_real', 'time', 'pledge_per_backer',\n",
    "       'backer_contribution', 'main_category_Art', 'main_category_Comics',\n",
    "       'main_category_Crafts', 'main_category_Dance', 'main_category_Design',\n",
    "       'main_category_Fashion', 'main_category_Film & Video',\n",
    "       'main_category_Food', 'main_category_Games', 'main_category_Journalism',\n",
    "       'main_category_Music', 'main_category_Photography',\n",
    "       'main_category_Publishing', 'main_category_Technology',\n",
    "       'main_category_Theater', 'Prediction'])\n",
    "df.to_csv('Live.csv',index=False,header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>backers</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "      <th>Art</th>\n",
       "      <th>Comics</th>\n",
       "      <th>Crafts</th>\n",
       "      <th>Dance</th>\n",
       "      <th>Design</th>\n",
       "      <th>...</th>\n",
       "      <th>Food</th>\n",
       "      <th>Games</th>\n",
       "      <th>Journalism</th>\n",
       "      <th>Music</th>\n",
       "      <th>Photography</th>\n",
       "      <th>Publishing</th>\n",
       "      <th>Technology</th>\n",
       "      <th>Theater</th>\n",
       "      <th>Prediction</th>\n",
       "      <th>main_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32</td>\n",
       "      <td>7500.0</td>\n",
       "      <td>30</td>\n",
       "      <td>36.343750</td>\n",
       "      <td>0.004846</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Journalism</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>500.0</td>\n",
       "      <td>29</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Music</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>156</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>11</td>\n",
       "      <td>34.807372</td>\n",
       "      <td>0.017404</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Art</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>59</td>\n",
       "      <td>102.500000</td>\n",
       "      <td>0.008542</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>29</td>\n",
       "      <td>104.177419</td>\n",
       "      <td>0.018941</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Film &amp; Video</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   backers  usd_goal_real  time  pledge_per_backer  backer_contribution  Art  \\\n",
       "0       32         7500.0    30          36.343750             0.004846    0   \n",
       "1        1          500.0    29          15.000000             0.030000    0   \n",
       "2      156         2000.0    11          34.807372             0.017404    1   \n",
       "3        4        12000.0    59         102.500000             0.008542    0   \n",
       "4       62         5500.0    29         104.177419             0.018941    0   \n",
       "\n",
       "   Comics  Crafts  Dance  Design      ...        Food  Games  Journalism  \\\n",
       "0       0       0      0       0      ...           0      0           1   \n",
       "1       0       0      0       0      ...           0      0           0   \n",
       "2       0       0      0       0      ...           0      0           0   \n",
       "3       0       0      0       0      ...           0      0           0   \n",
       "4       0       0      0       0      ...           0      0           0   \n",
       "\n",
       "   Music  Photography  Publishing  Technology  Theater  Prediction  \\\n",
       "0      0            0           0           0        0           0   \n",
       "1      1            0           0           0        0           0   \n",
       "2      0            0           0           0        0           1   \n",
       "3      0            0           0           0        0           0   \n",
       "4      0            0           0           0        0           1   \n",
       "\n",
       "   main_category  \n",
       "0     Journalism  \n",
       "1          Music  \n",
       "2            Art  \n",
       "3   Film & Video  \n",
       "4   Film & Video  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "location = 'Live-2-1.csv'\n",
    "Live_categories = pd.read_csv(location)\n",
    "Live_categories.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "table = pd.crosstab(Live_categories.main_category,Live_categories.Prediction)\n",
    "table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True, figsize=(20,10))\n",
    "plt.title('Stacked Bar Chart of Main Categories vs Prediction')\n",
    "plt.xlabel('Main Category')\n",
    "plt.ylabel('Proportion of Kickstarters')\n",
    "plt.savefig('cat_vs_state_stack')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(Live)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [],
   "source": [
    "def undummy(df):\n",
    "    if df['main_category_Art'] == 1:\n",
    "        return 'Art'\n",
    "    else:\n",
    "        if df['main_category_Comics']  == 1:\n",
    "            return 'Comics'\n",
    "        else:\n",
    "            return 'No category'\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-285-c7fc7c2724fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mundummy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-284-93c7ee8c1d55>\u001b[0m in \u001b[0;36mundummy\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mundummy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'main_category_Art'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m'Art'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'main_category_Comics'\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__nonzero__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1574\u001b[0m         raise ValueError(\"The truth value of a {0} is ambiguous. \"\n\u001b[1;32m   1575\u001b[0m                          \u001b[0;34m\"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1576\u001b[0;31m                          .format(self.__class__.__name__))\n\u001b[0m\u001b[1;32m   1577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1578\u001b[0m     \u001b[0m__bool__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m__nonzero__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
     ]
    }
   ],
   "source": [
    "undummy(Live)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['backers', 'usd_goal_real', 'time', 'pledge_per_backer',\n",
       "       'backer_contribution', 'main_category_Art', 'main_category_Comics',\n",
       "       'main_category_Crafts', 'main_category_Dance', 'main_category_Design',\n",
       "       'main_category_Fashion', 'main_category_Film & Video',\n",
       "       'main_category_Food', 'main_category_Games', 'main_category_Journalism',\n",
       "       'main_category_Music', 'main_category_Photography',\n",
       "       'main_category_Publishing', 'main_category_Technology',\n",
       "       'main_category_Theater', 'Prediction'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Live.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "main_category = Live[['main_category_Art', 'main_category_Comics',\n",
    "       'main_category_Crafts', 'main_category_Dance', 'main_category_Design',\n",
    "       'main_category_Fashion', 'main_category_Film & Video',\n",
    "       'main_category_Food', 'main_category_Games', 'main_category_Journalism',\n",
    "       'main_category_Music', 'main_category_Photography',\n",
    "       'main_category_Publishing', 'main_category_Technology',\n",
    "       'main_category_Theater']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_category_Art</th>\n",
       "      <th>main_category_Comics</th>\n",
       "      <th>main_category_Crafts</th>\n",
       "      <th>main_category_Dance</th>\n",
       "      <th>main_category_Design</th>\n",
       "      <th>main_category_Fashion</th>\n",
       "      <th>main_category_Film &amp; Video</th>\n",
       "      <th>main_category_Food</th>\n",
       "      <th>main_category_Games</th>\n",
       "      <th>main_category_Journalism</th>\n",
       "      <th>main_category_Music</th>\n",
       "      <th>main_category_Photography</th>\n",
       "      <th>main_category_Publishing</th>\n",
       "      <th>main_category_Technology</th>\n",
       "      <th>main_category_Theater</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>295659</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289164</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63177</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162483</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358182</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320562</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>278081</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12680</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289747</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>271888</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34590</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148639</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86067</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        main_category_Art  main_category_Comics  main_category_Crafts  \\\n",
       "295659                  0                     0                     0   \n",
       "289164                  0                     0                     0   \n",
       "63177                   1                     0                     0   \n",
       "162483                  0                     0                     0   \n",
       "358182                  0                     0                     0   \n",
       "320562                  0                     0                     0   \n",
       "278081                  0                     0                     0   \n",
       "12680                   0                     0                     0   \n",
       "289747                  0                     0                     0   \n",
       "271888                  0                     0                     0   \n",
       "34590                   0                     0                     0   \n",
       "148639                  0                     0                     0   \n",
       "86067                   0                     0                     0   \n",
       "\n",
       "        main_category_Dance  main_category_Design  main_category_Fashion  \\\n",
       "295659                    0                     0                      0   \n",
       "289164                    0                     0                      0   \n",
       "63177                     0                     0                      0   \n",
       "162483                    0                     0                      0   \n",
       "358182                    0                     0                      0   \n",
       "320562                    0                     0                      0   \n",
       "278081                    0                     0                      0   \n",
       "12680                     0                     0                      0   \n",
       "289747                    0                     0                      0   \n",
       "271888                    0                     0                      0   \n",
       "34590                     0                     0                      1   \n",
       "148639                    0                     1                      0   \n",
       "86067                     0                     0                      0   \n",
       "\n",
       "        main_category_Film & Video  main_category_Food  main_category_Games  \\\n",
       "295659                           0                   0                    0   \n",
       "289164                           0                   0                    0   \n",
       "63177                            0                   0                    0   \n",
       "162483                           1                   0                    0   \n",
       "358182                           1                   0                    0   \n",
       "320562                           1                   0                    0   \n",
       "278081                           0                   0                    0   \n",
       "12680                            0                   0                    0   \n",
       "289747                           1                   0                    0   \n",
       "271888                           1                   0                    0   \n",
       "34590                            0                   0                    0   \n",
       "148639                           0                   0                    0   \n",
       "86067                            0                   0                    0   \n",
       "\n",
       "        main_category_Journalism  main_category_Music  \\\n",
       "295659                         1                    0   \n",
       "289164                         0                    1   \n",
       "63177                          0                    0   \n",
       "162483                         0                    0   \n",
       "358182                         0                    0   \n",
       "320562                         0                    0   \n",
       "278081                         0                    0   \n",
       "12680                          0                    1   \n",
       "289747                         0                    0   \n",
       "271888                         0                    0   \n",
       "34590                          0                    0   \n",
       "148639                         0                    0   \n",
       "86067                          0                    0   \n",
       "\n",
       "        main_category_Photography  main_category_Publishing  \\\n",
       "295659                          0                         0   \n",
       "289164                          0                         0   \n",
       "63177                           0                         0   \n",
       "162483                          0                         0   \n",
       "358182                          0                         0   \n",
       "320562                          0                         0   \n",
       "278081                          0                         0   \n",
       "12680                           0                         0   \n",
       "289747                          0                         0   \n",
       "271888                          0                         0   \n",
       "34590                           0                         0   \n",
       "148639                          0                         0   \n",
       "86067                           0                         1   \n",
       "\n",
       "        main_category_Technology  main_category_Theater  \n",
       "295659                         0                      0  \n",
       "289164                         0                      0  \n",
       "63177                          0                      0  \n",
       "162483                         0                      0  \n",
       "358182                         0                      0  \n",
       "320562                         0                      0  \n",
       "278081                         1                      0  \n",
       "12680                          0                      0  \n",
       "289747                         0                      0  \n",
       "271888                         0                      0  \n",
       "34590                          0                      0  \n",
       "148639                         0                      0  \n",
       "86067                          0                      0  "
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "main_category.head(13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "mc = main_category.stack()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 272,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(mc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexingError",
     "evalue": "Too many indexers",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexingError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-287-a34b6a37b8c2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'category'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mmc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'flag'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mmc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1470\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   2011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2013\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_has_valid_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2014\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2015\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    218\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Too many indexers'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexingError\u001b[0m: Too many indexers"
     ]
    }
   ],
   "source": [
    "pd.DataFrame({'category':mc.iloc[:, [0]], 'flag':mc.iloc[:, [1]]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "295659  main_category_Art             0\n",
       "        main_category_Comics          0\n",
       "        main_category_Crafts          0\n",
       "        main_category_Dance           0\n",
       "        main_category_Design          0\n",
       "        main_category_Fashion         0\n",
       "        main_category_Film & Video    0\n",
       "        main_category_Food            0\n",
       "        main_category_Games           0\n",
       "        main_category_Journalism      1\n",
       "        main_category_Music           0\n",
       "        main_category_Photography     0\n",
       "        main_category_Publishing      0\n",
       "        main_category_Technology      0\n",
       "        main_category_Theater         0\n",
       "289164  main_category_Art             0\n",
       "        main_category_Comics          0\n",
       "        main_category_Crafts          0\n",
       "        main_category_Dance           0\n",
       "        main_category_Design          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mc.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['main_category', 'Flag']"
      ]
     },
     "execution_count": 259,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfx = mc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "295659  main_category_Art             0\n",
       "        main_category_Comics          0\n",
       "        main_category_Crafts          0\n",
       "        main_category_Dance           0\n",
       "        main_category_Design          0\n",
       "        main_category_Fashion         0\n",
       "        main_category_Film & Video    0\n",
       "        main_category_Food            0\n",
       "        main_category_Games           0\n",
       "        main_category_Journalism      1\n",
       "        main_category_Music           0\n",
       "        main_category_Photography     0\n",
       "        main_category_Publishing      0\n",
       "        main_category_Technology      0\n",
       "        main_category_Theater         0\n",
       "289164  main_category_Art             0\n",
       "        main_category_Comics          0\n",
       "        main_category_Crafts          0\n",
       "        main_category_Dance           0\n",
       "        main_category_Design          0\n",
       "        main_category_Fashion         0\n",
       "        main_category_Film & Video    0\n",
       "        main_category_Food            0\n",
       "        main_category_Games           0\n",
       "        main_category_Journalism      0\n",
       "        main_category_Music           1\n",
       "        main_category_Photography     0\n",
       "        main_category_Publishing      0\n",
       "        main_category_Technology      0\n",
       "        main_category_Theater         0\n",
       "                                     ..\n",
       "162483  main_category_Fashion         0\n",
       "        main_category_Film & Video    1\n",
       "        main_category_Food            0\n",
       "        main_category_Games           0\n",
       "        main_category_Journalism      0\n",
       "        main_category_Music           0\n",
       "        main_category_Photography     0\n",
       "        main_category_Publishing      0\n",
       "        main_category_Technology      0\n",
       "        main_category_Theater         0\n",
       "358182  main_category_Art             0\n",
       "        main_category_Comics          0\n",
       "        main_category_Crafts          0\n",
       "        main_category_Dance           0\n",
       "        main_category_Design          0\n",
       "        main_category_Fashion         0\n",
       "        main_category_Film & Video    1\n",
       "        main_category_Food            0\n",
       "        main_category_Games           0\n",
       "        main_category_Journalism      0\n",
       "        main_category_Music           0\n",
       "        main_category_Photography     0\n",
       "        main_category_Publishing      0\n",
       "        main_category_Technology      0\n",
       "        main_category_Theater         0\n",
       "320562  main_category_Art             0\n",
       "        main_category_Comics          0\n",
       "        main_category_Crafts          0\n",
       "        main_category_Dance           0\n",
       "        main_category_Design          0\n",
       "Length: 80, dtype: int64"
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mc.columns = ['main_category', 'Flag']\n",
    "mc.head(80)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['Grades'] == 101] #find rows equal to 101"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Flag'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/multi.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m    973\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 974\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mlibindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value_at\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    975\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.get_value_at\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/src/util.pxd\u001b[0m in \u001b[0;36mutil.get_value_at\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'str' object cannot be interpreted as an integer",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-266-65c86a149d04>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Flag'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    765\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_apply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 767\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    768\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    769\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/multi.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m    980\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    981\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 982\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    983\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pragma: no cover\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    984\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/multi.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m    964\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    965\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 966\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    967\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    968\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.BaseMultiIndexCodesEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Flag'"
     ]
    }
   ],
   "source": [
    "mc['Flag']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexingError",
     "evalue": "Too many indexers",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexingError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-263-56621123ca8c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1470\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   2011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2013\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_has_valid_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2014\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2015\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    218\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Too many indexers'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexingError\u001b[0m: Too many indexers"
     ]
    }
   ],
   "source": [
    "mc.iloc[:, [1]] == 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexingError",
     "evalue": "Too many indexers",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexingError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-264-ab47293b93f6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmain_category_live\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1470\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   2011\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2013\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_has_valid_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2014\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2015\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    218\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Too many indexers'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexingError\u001b[0m: Too many indexers"
     ]
    }
   ],
   "source": [
    "main_category_live = mc[mc.iloc[:, 2] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main_category_Art</th>\n",
       "      <th>main_category_Comics</th>\n",
       "      <th>main_category_Crafts</th>\n",
       "      <th>main_category_Dance</th>\n",
       "      <th>main_category_Design</th>\n",
       "      <th>main_category_Fashion</th>\n",
       "      <th>main_category_Film &amp; Video</th>\n",
       "      <th>main_category_Food</th>\n",
       "      <th>main_category_Games</th>\n",
       "      <th>main_category_Journalism</th>\n",
       "      <th>main_category_Music</th>\n",
       "      <th>main_category_Photography</th>\n",
       "      <th>main_category_Publishing</th>\n",
       "      <th>main_category_Technology</th>\n",
       "      <th>main_category_Theater</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101214</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88362</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205161</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12673</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20805</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        main_category_Art  main_category_Comics  main_category_Crafts  \\\n",
       "101214                  0                     0                     1   \n",
       "88362                   0                     0                     1   \n",
       "205161                  0                     0                     1   \n",
       "12673                   0                     0                     1   \n",
       "20805                   0                     0                     1   \n",
       "\n",
       "        main_category_Dance  main_category_Design  main_category_Fashion  \\\n",
       "101214                    0                     0                      0   \n",
       "88362                     0                     0                      0   \n",
       "205161                    0                     0                      0   \n",
       "12673                     0                     0                      0   \n",
       "20805                     0                     0                      0   \n",
       "\n",
       "        main_category_Film & Video  main_category_Food  main_category_Games  \\\n",
       "101214                           0                   0                    0   \n",
       "88362                            0                   0                    0   \n",
       "205161                           0                   0                    0   \n",
       "12673                            0                   0                    0   \n",
       "20805                            0                   0                    0   \n",
       "\n",
       "        main_category_Journalism  main_category_Music  \\\n",
       "101214                         0                    0   \n",
       "88362                          0                    0   \n",
       "205161                         0                    0   \n",
       "12673                          0                    0   \n",
       "20805                          0                    0   \n",
       "\n",
       "        main_category_Photography  main_category_Publishing  \\\n",
       "101214                          0                         0   \n",
       "88362                           0                         0   \n",
       "205161                          0                         0   \n",
       "12673                           0                         0   \n",
       "20805                           0                         0   \n",
       "\n",
       "        main_category_Technology  main_category_Theater  \n",
       "101214                         0                      0  \n",
       "88362                          0                      0  \n",
       "205161                         0                      0  \n",
       "12673                          0                      0  \n",
       "20805                          0                      0  "
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "main_category_live.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'main_category'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-232-85ef23383337>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrosstab\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmain_category\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mLive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPrediction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstacked\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Stacked Bar Chart of Main Categories vs State'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Main Category'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Proportion of Kickstarters'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   4374\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4375\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4376\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4377\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4378\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'main_category'"
     ]
    }
   ],
   "source": [
    "table = pd.crosstab(Live.main_category,Live.Prediction)\n",
    "table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True, figsize=(20,10))\n",
    "plt.title('Stacked Bar Chart of Main Categories vs State')\n",
    "plt.xlabel('Main Category')\n",
    "plt.ylabel('Proportion of Kickstarters')\n",
    "plt.savefig('cat_vs_state_stack')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Film & Video', 'Music', 'Food', 'Games', 'Design', 'Comics',\n",
       "       'Publishing', 'Fashion', 'Theater', 'Art', 'Photography', 'Crafts',\n",
       "       'Technology', 'Journalism', 'Dance'], dtype=object)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_completed_d['main_category'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "#main_cat_dictnum = {'Film & Video': 0, 'Music': 1, 'Food': 2, 'Games': 3, 'Design': 4,'Comics' : 5,\n",
    "#       'Publishing': 6, 'Fashion': 7, 'Theater':8, 'Art':9, 'Photography':10, 'Crafts':11,\n",
    "#       'Technology' :12}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_completed_d_mc = df_completed_d.replace({\"main_category\": main_cat_dictnum})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "modeldfn = df_completed_d._get_numeric_data()\n",
    "\n",
    "model_successful = modeldfn[(modeldfn['gap'] > 0 )]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>backers</th>\n",
       "      <th>usd_goal_real</th>\n",
       "      <th>time</th>\n",
       "      <th>gap</th>\n",
       "      <th>pledge_per_backer</th>\n",
       "      <th>backer_contribution</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>59</td>\n",
       "      <td>-27579.0</td>\n",
       "      <td>161.400000</td>\n",
       "      <td>0.005380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>44</td>\n",
       "      <td>-44780.0</td>\n",
       "      <td>73.333333</td>\n",
       "      <td>0.001630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>29</td>\n",
       "      <td>-4999.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>224</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2375.0</td>\n",
       "      <td>233.816964</td>\n",
       "      <td>0.004676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>19</td>\n",
       "      <td>205.0</td>\n",
       "      <td>75.312500</td>\n",
       "      <td>0.075313</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   state  backers  usd_goal_real  time      gap  pledge_per_backer  \\\n",
       "1      0       15        30000.0    59 -27579.0         161.400000   \n",
       "2      0        3        45000.0    44 -44780.0          73.333333   \n",
       "3      0        1         5000.0    29  -4999.0           1.000000   \n",
       "5      1      224        50000.0    34   2375.0         233.816964   \n",
       "6      1       16         1000.0    19    205.0          75.312500   \n",
       "\n",
       "   backer_contribution  \n",
       "1             0.005380  \n",
       "2             0.001630  \n",
       "3             0.000200  \n",
       "5             0.004676  \n",
       "6             0.075313  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeldfn.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1539.5x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_to_plot = df_completed_d[(df_completed_d['gap'] > 0 )]\n",
    "g = sns.pairplot(model_to_plot, hue = \"main_category\", \n",
    "                 y_vars = [\"gap\"], \n",
    "                 x_vars = [\"backers\", \"time\", \"pledge_per_backer\", \"usd_goal_real\"] , height = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1533.48x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_to_plot = df_completed_d[(df_completed_d['gap'] > 0 ) & (df_completed_d['main_category'] == 'Technology' )]\n",
    "g = sns.pairplot(model_to_plot, hue = \"main_category\", \n",
    "                 y_vars = [\"gap\"], \n",
    "                 x_vars = [\"backers\", \"time\", \"pledge_per_backer\", \"usd_goal_real\"] , height = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1522x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_to_plot = df_completed_d[(df_completed_d['gap'] > 0 ) & (df_completed_d['main_category'] == 'Games' )]\n",
    "g = sns.pairplot(model_to_plot, hue = \"main_category\", \n",
    "                 y_vars = [\"gap\"], \n",
    "                 x_vars = [\"backers\", \"time\", \"pledge_per_backer\", \"usd_goal_real\"] , height = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "modeldfcx = pd.get_dummies(data = df_completed_d, columns = ['main_category'])\n",
    "\n",
    "modeldfcx = modeldfcx[(modeldfcx['gap'] > 0 )]\n",
    "\n",
    "corr = modeldfcx.corr()\n",
    "# Generate a mask for the upper triangle\n",
    "mask = np.zeros_like(corr, dtype=np.bool)\n",
    "mask[np.triu_indices_from(mask)] = True\n",
    "# Generate a custom diverging colormap\n",
    "cmap = sns.diverging_palette(220, 10, as_cmap=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0])"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeldfcx['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a30e8f2e8>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x1296 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplots(figsize=(18,18))\n",
    "sns.heatmap(corr, mask=mask, cmap=cmap, vmax=1.0, vmin= -1.0, center=0, annot=True,\n",
    "            square=True, linewidths=.6, cbar_kws={\"shrink\": .4})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>           <td>gap</td>       <th>  R-squared:         </th>  <td>   0.520</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th>  <td>   0.520</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>  <td>2.813e+04</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Thu, 18 Apr 2019</td> <th>  Prob (F-statistic):</th>   <td>  0.00</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>18:32:51</td>     <th>  Log-Likelihood:    </th> <td>-1.6768e+06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>129798</td>      <th>  AIC:               </th>  <td>3.354e+06</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>129793</td>      <th>  BIC:               </th>  <td>3.354e+06</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     5</td>      <th>                     </th>      <td> </td>     \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>      <td> </td>     \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>main_category_Music</th>      <td>-9310.8429</td> <td>  664.566</td> <td>  -14.010</td> <td> 0.000</td> <td>-1.06e+04</td> <td>-8008.305</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>main_category_Technology</th> <td> 1.348e+04</td> <td> 1295.654</td> <td>   10.406</td> <td> 0.000</td> <td> 1.09e+04</td> <td>  1.6e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>pledge_per_backer</th>        <td>   75.7881</td> <td>    2.045</td> <td>   37.053</td> <td> 0.000</td> <td>   71.779</td> <td>   79.797</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>backers</th>                  <td>   68.3736</td> <td>    0.206</td> <td>  331.699</td> <td> 0.000</td> <td>   67.970</td> <td>   68.778</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>usd_goal_real</th>            <td>   -0.3607</td> <td>    0.011</td> <td>  -31.836</td> <td> 0.000</td> <td>   -0.383</td> <td>   -0.338</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>419558.341</td> <th>  Durbin-Watson:     </th>     <td>   1.989</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>   <td> 0.000</td>   <th>  Jarque-Bera (JB):  </th> <td>220667049441.134</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>            <td>53.507</td>   <th>  Prob(JB):          </th>     <td>    0.00</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>6389.743</td>  <th>  Cond. No.          </th>     <td>1.42e+05</td>    \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.42e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                    gap   R-squared:                       0.520\n",
       "Model:                            OLS   Adj. R-squared:                  0.520\n",
       "Method:                 Least Squares   F-statistic:                 2.813e+04\n",
       "Date:                Thu, 18 Apr 2019   Prob (F-statistic):               0.00\n",
       "Time:                        18:32:51   Log-Likelihood:            -1.6768e+06\n",
       "No. Observations:              129798   AIC:                         3.354e+06\n",
       "Df Residuals:                  129793   BIC:                         3.354e+06\n",
       "Df Model:                           5                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "============================================================================================\n",
       "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------\n",
       "main_category_Music      -9310.8429    664.566    -14.010      0.000   -1.06e+04   -8008.305\n",
       "main_category_Technology  1.348e+04   1295.654     10.406      0.000    1.09e+04     1.6e+04\n",
       "pledge_per_backer           75.7881      2.045     37.053      0.000      71.779      79.797\n",
       "backers                     68.3736      0.206    331.699      0.000      67.970      68.778\n",
       "usd_goal_real               -0.3607      0.011    -31.836      0.000      -0.383      -0.338\n",
       "==============================================================================\n",
       "Omnibus:                   419558.341   Durbin-Watson:                   1.989\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):     220667049441.134\n",
       "Skew:                          53.507   Prob(JB):                         0.00\n",
       "Kurtosis:                    6389.743   Cond. No.                     1.42e+05\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 1.42e+05. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#result = smf.ols('gap ~ main_category_Art + main_category_Comics + main_category_Crafts + main_category_Dance + main_category_Design + main_category_Fashion + main_category_Film & Video + main_category_Food + main_category_Games +  main_category_Journalism + main_category_Music + main_category_Photography + main_category_Publishing\tmain_category_Technology\tmain_category_Theater age + exercise + hours', data=df).fit()\n",
    "result = smf.ols('gap ~ main_category_Music + main_category_Technology + pledge_per_backer + backers + usd_goal_real - 1' , data=modeldfcx).fit()\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>           <td>gap</td>       <th>  R-squared:         </th>  <td>   0.519</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th>  <td>   0.519</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>  <td>3.506e+04</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Thu, 18 Apr 2019</td> <th>  Prob (F-statistic):</th>   <td>  0.00</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>18:32:53</td>     <th>  Log-Likelihood:    </th> <td>-1.6769e+06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>129798</td>      <th>  AIC:               </th>  <td>3.354e+06</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>129794</td>      <th>  BIC:               </th>  <td>3.354e+06</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     4</td>      <th>                     </th>      <td> </td>     \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>      <td> </td>     \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>main_category_Technology</th> <td> 1.463e+04</td> <td> 1294.014</td> <td>   11.310</td> <td> 0.000</td> <td> 1.21e+04</td> <td> 1.72e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>pledge_per_backer</th>        <td>   69.7190</td> <td>    2.000</td> <td>   34.851</td> <td> 0.000</td> <td>   65.798</td> <td>   73.640</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>backers</th>                  <td>   68.3605</td> <td>    0.206</td> <td>  331.390</td> <td> 0.000</td> <td>   67.956</td> <td>   68.765</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>usd_goal_real</th>            <td>   -0.3625</td> <td>    0.011</td> <td>  -31.977</td> <td> 0.000</td> <td>   -0.385</td> <td>   -0.340</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>419956.485</td> <th>  Durbin-Watson:     </th>     <td>   1.985</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>   <td> 0.000</td>   <th>  Jarque-Bera (JB):  </th> <td>221679526669.930</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>            <td>53.656</td>   <th>  Prob(JB):          </th>     <td>    0.00</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>6404.377</td>  <th>  Cond. No.          </th>     <td>1.42e+05</td>    \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.42e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                    gap   R-squared:                       0.519\n",
       "Model:                            OLS   Adj. R-squared:                  0.519\n",
       "Method:                 Least Squares   F-statistic:                 3.506e+04\n",
       "Date:                Thu, 18 Apr 2019   Prob (F-statistic):               0.00\n",
       "Time:                        18:32:53   Log-Likelihood:            -1.6769e+06\n",
       "No. Observations:              129798   AIC:                         3.354e+06\n",
       "Df Residuals:                  129794   BIC:                         3.354e+06\n",
       "Df Model:                           4                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "============================================================================================\n",
       "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------\n",
       "main_category_Technology  1.463e+04   1294.014     11.310      0.000    1.21e+04    1.72e+04\n",
       "pledge_per_backer           69.7190      2.000     34.851      0.000      65.798      73.640\n",
       "backers                     68.3605      0.206    331.390      0.000      67.956      68.765\n",
       "usd_goal_real               -0.3625      0.011    -31.977      0.000      -0.385      -0.340\n",
       "==============================================================================\n",
       "Omnibus:                   419956.485   Durbin-Watson:                   1.985\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):     221679526669.930\n",
       "Skew:                          53.656   Prob(JB):                         0.00\n",
       "Kurtosis:                    6404.377   Cond. No.                     1.42e+05\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 1.42e+05. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#result = smf.ols('gap ~ main_category_Art + main_category_Comics + main_category_Crafts + main_category_Dance + main_category_Design + main_category_Fashion + main_category_Film & Video + main_category_Food + main_category_Games +  main_category_Journalism + main_category_Music + main_category_Photography + main_category_Publishing\tmain_category_Technology\tmain_category_Theater age + exercise + hours', data=df).fit()\n",
    "result = smf.ols('gap ~ main_category_Technology + pledge_per_backer + backers + usd_goal_real - 1' , data=modeldfcx).fit()\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_train' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-93-ae4c411233fc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'df_train' is not defined"
     ]
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gap_estimator(category, backers, goal_real):\n",
    "    if category == \"Design\":\n",
    "        factor = 7182\n",
    "    else: \n",
    "        factor = 9961\n",
    "    #factor = 100    \n",
    "    gap_estimated = factor + 75.2004 * backers - 0.9998 * goal_real \n",
    "    return gap_estimated\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7182.0"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gap_estimator(\"Design\", 0, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_train' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-80-3351b7ff41a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_train_biggest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'main_category'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Design'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdf_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'main_category'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Technology'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf_train_biggest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'df_train' is not defined"
     ]
    }
   ],
   "source": [
    "df_train_biggest = df_train[(df_train['main_category'] == 'Design') | (df_train['main_category'] == 'Technology')]\n",
    "df_train_biggest.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_train_biggest' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-81-b277e7527a2e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m df_train_biggest['estimated gap'] = gap_estimator(df_train_biggest['main_category'].str , df_train_biggest['backers'], df_train_biggest['usd_goal_real']\n\u001b[0m\u001b[1;32m      2\u001b[0m )\n\u001b[1;32m      3\u001b[0m \u001b[0mdf_train_biggest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'df_train_biggest' is not defined"
     ]
    }
   ],
   "source": [
    "df_train_biggest['estimated gap'] = gap_estimator(df_train_biggest['main_category'].str , df_train_biggest['backers'], df_train_biggest['usd_goal_real']\n",
    ")\n",
    "df_train_biggest.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_train_biggest' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-82-f13a57604571>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_train_biggest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mby\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'estimated gap'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mascending\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'df_train_biggest' is not defined"
     ]
    }
   ],
   "source": [
    "df_train_biggest.sort_values(by='estimated gap', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
